"""Домашнее задание #0.

Вам нужно написать две функции для нахождения точечной оценки и доверительного интервала параметра p геометрического распределения Geom(p).
На вход функциям будет подаваться выборка из геометрического распределения.
Значения выборки - кол-во неуспешных испытаний до первого успешного испытания.
Пример:
1 -> X=0
01 -> X=1
0001 -> X=3


Для успешной сдачи задания нужно:

1. Реализовать код функций.
2. Переименовать файл, заменив в нём <firstname> и <lastname>.
3. Отправить py-файл на проверку.

Для проверки правильности реализации функций можно запустить py-файл командой в терминале python3 <file_name>.py. Должны отобразиться точечные оценки и доверительные интервалы, построенные для различных размеров выборки. Проверьте, что при увеличении размера выборки оценка параметра становится точнее, а доверительные интервалы более узкими.

Баллы: за правильную реализацию каждой функции даётся 5 баллов.
"""

import numpy as np
from scipy import stats


def get_p_estimation(data: np.array):
    """Находит ОМП параметра p геометрического р-ния."""
    p = 1 / (data.mean() + 1)
    return p


def get_ci(data: np.array, alpha: float=0.05):
    """Находит ДИ для параметра p геометрического р-ния."""
    p = get_p_estimation(data)
    n = len(data)
    q = stats.norm.ppf(1 - alpha / 2)
    delta = p * np.sqrt(1 - p) / np.sqrt(n) * q
    ls = p - delta
    rs = p + delta
    ci = (ls, rs)
    return ci


if __name__ == "__main__":
    np.random.seed(71)

    print(f'{"size": ^7}|{"p": ^7}|{"p_est": ^7}|{"CI": ^15}')
    print(f'{"":-^40}')
    sizes = np.logspace(1, 5, 10).astype(int)
    for size in sizes:
        p = np.random.rand()
        data = np.random.geometric(p, size) - 1
        p_estimation = get_p_estimation(data)
        ci = get_ci(data)
        ci_print = f'({ci[0]:0.3f}, {ci[1]:0.3f})'
        print(f'{size: >7}|{round(p, 3): ^7}|{round(p_estimation, 3): ^7}|{ci_print: ^16}')